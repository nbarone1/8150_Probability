# 8150 HW5 P. 5

import numpy as np
import pandas as pd


def expirement(n_customer):

    # Set Ti distribution - interarrival time
    int_arr_time = np.random.lognormal(1,1)

    # Set Vi distribution - service time
    serv_time = np.random.exponential(1.2)

    # Set system start/event 0
    time = 0
    queue = 0
    event = 0
    serv_status = "idle"
    arr_cust = 0
    serv_cust = 0
    depar_cust = 0
    next_arr_time = time + int_arr_time

    # Begin event 1 simulation
    arr_cust += 1
    event += 1


    # Set output tables
    res_col = ['event', 'time', 'type', 'queue', 'arr cust', 'serv cust', 'depar cust']

    res = pd.DataFrame([[1,float(next_arr_time),"arrival",queue, arr_cust,0,0]],columns = res_col)

    while serv_cust <= n_customer:
        # start event
        event_type = res['type'].iloc[event-1]
        time = res['time'].iloc[event-1]

        # event paths
        # path 1, event is arrival
        if event_type == "arrival":
            # generated by default with int_arr_time

            # add arrived counter
            arr_cust += 1

            # generate next arrival time
            int_arr_time = np.random.lognormal(1,1)
            next_arr_time = time + int_arr_time

            # if server idle
            if serv_status == "idle":
                # add serv count
                serv_cust += 1

                # update serv time
                res['serv cust'].iloc[event-1] = serv_cust

                # generate next service time
                serv_time = np.random.exponential(1.2)
                depar_time = time + serv_time
                depar_cust += 1

                # add event to result
                gen_event = pd.DataFrame([
                    [99,float(depar_time),"departure", 0,0,0,depar_cust],
                    [99,float(next_arr_time), "arrival", 0, arr_cust,0,0]
                ], columns = res_col)

                res = pd.concat([res, gen_event])
                
                # sort by time
                res = res.sort_values(['time'])
                res.reset_index(drop = True, inplace=True)

                # assign event number in time order
                res['event'] = list(range(1, res.shape[0]+1))

                # start next event
                event += 1

            # if server busy
            if serv_status == "busy":
                # increase queu
                queue += 1

                # add generated event
                            # add event to result
                gen_event = pd.DataFrame([
                    [99,float(next_arr_time), "arrival", 0, arr_cust,0,0]
                ], columns = res_col)

                res = pd.concat([res, gen_event])
                
                # sort by time
                res = res.sort_values(['time'])
                res.reset_index(drop = True, inplace=True)

                # assign event number in time order
                res['event'] = list(range(1, res.shape[0]+1))

                # start next event
                event += 1
        # if event is departure
        if event_type == "departure":

            # if queue is 0, server remains idle
            if queue == 0:
                # set server idle
                serv_status = "idle"

                # event has finished and counter moves on
                event += 1
            
            # if queue is not empty
            if queue != 0:
                # customer being served passes to next, marked as in service at event
                serv_cust += 1
                res['serv cust'].iloc[event-1] = serv_cust

                # decrease queue
                queue -= 1
                serv_status = "busy"

                # genereate next event
                serv_time = np.random.exponential(1.2)
                depar_time = time + serv_time
                depar_cust += 1

                # add generated events to results
                gen_event = pd.DataFrame([
                    [99,float(depar_time),"departure",0,0,0,depar_cust]
                ],columns = res_col)

                res = pd.concat([res, gen_event])
                
                # sort by time
                res = res.sort_values(['time'])
                res.reset_index(drop = True, inplace=True)

                # assign event number in time order
                res['event'] = list(range(1, res.shape[0]+1))

                # record queue number
                res['queue'].iloc[event-1] = queue

                # start next event
                event += 1

        # set server status for next event
        if next_arr_time < depar_time:
            serv_status = "busy"
        else:
            serv_status = "idle"

    # Output Table
    # Get Customers by Tyoe
    arrivals = res.loc[res['type'] == 'arrival',['time','arr cust']]
    arrivals.columns = ['time', 'customer']

    departures = res.loc[res['type'] == 'departure',['time','depar cust']]
    departures.columns = ['time', 'customer']

    serving = res.loc[res['serv cust'] != 0,['time','serv cust']]
    serving.columns = ['time', 'customer']

    # Merge
    customer_df = arrivals.merge(departures, on='customer')
    customer_df = customer_df.merge(serving, on='customer')
    customer_df.columns = ['arrival time', 'customer', 'departure time', 'serving time']
    customer_df = customer_df[['customer', 'arrival time', 'serving time', 'departure time']]

    #get time in queue
    customer_df['time in queue'] = customer_df['serving time'] - customer_df['arrival time'] 
    #get time in system
    customer_df['time in system'] = customer_df['departure time'] - customer_df['arrival time'] 
    #get time in server
    customer_df['time in server'] = customer_df['departure time'] - customer_df['serving time']
    return(customer_df)

# Run expirement
attempt1 = expirement(100)
attempt2 = expirement(100)
attempt3 = expirement(100)

attempt1.to_csv('attempt1.csv')
attempt2.to_csv('attempt2.csv')
attempt3.to_csv('attempt3.csv')